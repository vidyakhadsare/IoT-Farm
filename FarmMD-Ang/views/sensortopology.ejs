<!DOCTYPE html>
<html>
    <head>

      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
      <!-- Meta, title, CSS, favicons, etc. -->
      <meta charset="utf-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width, initial-scale=1">

      <title>foris-io</title>




        <link rel="stylesheet" href="/sensortopology/next/dest/css/next.css">
        <script src="/sensortopology/next/dest/js/next.js"></script>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.0/jquery.min.js"></script>
        <script src="jquery-3.1.1.min.js" type="text/javascript"> </script>
        <!-- jQuery -->
        <script src="/vendors/jquery/dist/jquery.min.js"></script>
        <!-- Bootstrap -->

    </head>
    <body>
      <script>

      var topologyData= {
        };
        var flag = 0;
        var topo;
        var sensorInfo;
        var topologyData= {
        };
        var flag = 0;
        var topo;

        jQuery.get("/sensorInfo", function(datares) {}).fail(function() {
                alert("error");
            })
            .done(function(datares) {

               setInterval(function () {
            console.log('second passed');
                var sensorData;
                jQuery.get("/sensorRealTimeData", function(result) {}).fail(function() {
                alert("error");
                })
                .done(function(result) {
                    sensorData = result;
                var links = [];
                var nodes = [];
                var count = 50;
                var nodesObject = new Object();
                nodesObject["name"] = "Gateway";
                nodesObject["x"] = 400;
                nodesObject["y"] = 100;
                nodesObject["device_type"] = "router";
                nodes.push(nodesObject);

                var i =0;

                for (i = 0; i < datares.rows.length; i++) {

                    var nodesObject = new Object();
                    var linksObject = new Object();
                    nodesObject["id"] = datares.rows[i].doc.SensorID;
                    nodesObject["name"] = "Sensor" + datares.rows[i].doc.SensorID;
                    nodesObject["Latitude"] = datares.rows[i].doc.Latitude;
                    nodesObject["Longitude"] = datares.rows[i].doc.Longitude;
                    nodesObject["Temperature"] = sensorData[i].sensor.Temperature;
                    nodesObject["Moisture"] = sensorData[i].sensor.Moisture;
                    nodesObject["Salinity"] = sensorData[i].sensor.Salinity;
                    nodesObject["Ph"] = sensorData[i].sensor.Ph;
                    nodesObject["x"] = 660 - count;
                    count = count + 150;
                    nodesObject["y"] = count;
                    nodesObject["device_type"] = "server";
                    nodes.push(nodesObject);
                    linksObject["source"] = i;
                    linksObject["target"] = 0;
                    links.push(linksObject);

                }
                var linksObject = new Object();
                linksObject["source"] = i;
                linksObject["target"] = 0;
                links.push(linksObject);

                topologyData.nodes = nodes;
                topologyData.links = links;
                draw();
            });
            }, 10000);

            });


        function draw() {
        	(function(nx) {
            /**
             * define application
             */
        	    var Shell = nx.define(nx.ui.Application, {
        	        methods: {
        	            start: function() {
        	                //your application main entry

                            if(flag==0){
            	                // initialize a topology
            	                 topo = new nx.graphic.Topology({
            	                    // set the topology view's with and height
            	                    width: 1000,
            	                    height: 580,
            	                    // node config
            	                    nodeConfig: {
            	                        // label display name from of node's model, could change to 'model.id' to show id
            	                        label: 'model.name',
                                        iconType: 'model.device_type'
            	                    },
            	                    // link config
            	                    linkConfig: {
            	                        // multiple link type is curve, could change to 'parallel' to use parallel link
            	                        linkType: 'curve'
            	                    },

                                    /*nodeSetConfig: {
                                    label: 'model.id',
                                    iconType: 'model.iconType'
                                    },*/
            	                    // show node's icon, could change to false to show dot
            	                    showIcon: true
            	                });
                                flag = 1;
                            }
        	                //set data to topology
        	                topo.data(topologyData);
        	                //attach topology to document
        	                topo.attach(this);
        	            }
        	        }
        	    });

        	    /**
        	     * create application instance
        	     */
        	    var shell = new Shell();

        	    /**
        	     * invoke start method
        	     */
        	    shell.start();
            	})(nx);
        }
    </script>
    </body>
</html>
