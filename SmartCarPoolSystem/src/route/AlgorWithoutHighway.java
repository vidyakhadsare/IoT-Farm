package route;

/**
 * This class calculates the optimal route if the traffic condition on highways
 * is bad
 * 
 * optimal route is calculated without using highways
 * 
 * @author hegde
 *
 */
public class AlgorWithoutHighway implements RoutingStrategy {

	/**
	 * over rides the route method from its interface class using route matrix
	 * it returns the optimal route
	 * 
	 */
	@Override
	public int route(int source, int destination) {

		int[][] routeMatrix = { { 0, 9, 6, 5, 3, 4, 6, 3, 7, 3, 5, 6, 5, 9, 6, 5, 3, 4, 6, 3, 7, 3, 5, 6, 9 }, 
				{ 3, 0, 3, 5, 2, 2, 7, 9, 4, 6, 8, 4, 3, 2, 3, 5, 2, 2, 7, 9, 4, 6, 8, 4, 5 },
				{ 7, 2, 0, 4, 7, 1, 2, 6, 4, 6, 7, 8, 7, 2, 4, 4, 7, 1, 2, 6, 4, 6, 7, 8, 7 }, 
				{ 6, 1, 9, 0, 3, 4, 6, 2, 9, 1, 5, 4, 6, 1, 9, 7, 3, 4, 6, 2, 9, 1, 5, 6, 9 }, 
				{ 4, 8, 4, 6, 0, 1, 3, 6, 4, 6, 8, 4, 4, 8, 4, 6, 8, 1, 3, 6, 4 ,6, 8, 4, 9 },
				{ 3, 6, 3, 5, 2, 0, 7, 9, 4, 5, 8, 3, 3, 6, 3, 5, 2, 3, 7, 9, 4 ,5, 8, 3, 6 },
				{ 7, 2, 2, 4, 7, 1, 0, 6, 4, 2, 5, 8, 7, 2, 2, 4, 7, 1, 1, 6, 4, 2, 5, 8, 6 }, 
				{ 6, 1, 9, 8, 3, 4, 6, 2, 9, 1, 5, 4, 6, 7, 0, 7, 3, 4, 6, 2, 9, 1, 5, 6, 9 },
				{ 3, 6, 3, 5, 2, 3, 7, 9, 4, 5, 8, 3, 3, 6, 3, 0, 2, 4, 7, 9, 4 ,5, 8, 3, 6 },
				{ 7, 2, 2, 4, 7, 1, 8, 6, 4, 2, 5, 8, 7, 2, 2, 4, 0, 1, 7, 6, 4, 2, 5, 8, 6 },
				{ 2, 9, 6, 5, 3, 4, 6, 3, 7, 3, 5, 6, 5, 9, 6, 5, 3, 0, 6, 3, 7, 3, 5, 6, 9 }, 
				{ 3, 3, 3, 5, 2, 2, 7, 9, 4, 6, 8, 4, 3, 2, 3, 5, 2, 2, 0, 9, 4, 6, 8, 4, 5 },
				{ 6, 1, 9, 8, 3, 4, 6, 2, 9, 1, 5, 7, 6, 1, 9, 7, 3, 4, 6, 0, 9, 1, 5, 6, 9 },
				{ 7, 9, 6, 5, 3, 4, 6, 0, 7, 4, 1, 7, 7, 9, 6, 5, 3, 4, 6, 9, 7, 4, 1, 7, 5 },
				{ 6, 1, 9, 8, 3, 4, 6, 2, 0, 4, 6, 8, 7, 9, 6, 5, 3, 4, 6, 8, 7, 4, 7, 7, 5 },
				{ 7, 2, 9, 4, 7, 1, 2, 6, 4, 0, 7, 8, 7, 9, 6, 5, 3, 4, 6, 7, 7, 4, 6, 7, 6 },
				{ 7, 9, 6, 5, 3, 4, 6, 0, 7, 4, 0, 7, 6, 1, 9, 6, 3, 4, 6, 2, 9, 1, 5, 4, 9 }, 
				{ 6, 1, 9, 8, 3, 4, 6, 2, 9, 1, 5, 0, 6, 1, 9, 7, 3, 4, 6, 2, 9, 1, 5, 6, 9 },
				{ 3, 5, 3, 5, 2, 2, 7, 9, 4, 6, 8, 8, 0, 2, 3, 5, 2, 2, 7, 9, 4, 6, 8, 4, 5 },
				{ 3, 3, 3, 5, 2, 2, 7, 9, 4, 6, 8, 4, 3, 2, 3, 5, 2, 2, 0, 9, 4, 6, 8, 4, 5 },
				{ 6, 1, 9, 8, 3, 4, 6, 2, 9, 1, 5, 7, 6, 1, 9, 7, 3, 4, 6, 0, 9, 1, 5, 6, 9 },
				{ 3, 5, 3, 5, 2, 2, 7, 9, 4, 6, 8, 8, 5, 2, 3, 5, 2, 2, 7, 9, 0, 6, 8, 4, 5 },
				{ 7, 2, 7, 4, 7, 1, 2, 6, 4, 6, 7, 8, 8, 7, 4, 4, 7, 1, 2, 6, 4, 0, 7, 8, 7 }, 
				{ 6, 1, 9, 8, 3, 4, 6, 2, 9, 1, 5, 4, 6, 7, 8, 7, 3, 4, 6, 2, 9, 1, 0, 6, 9 },
				{ 7, 2, 2, 4, 7, 1, 5, 6, 4, 2, 5, 8, 7, 2, 2, 4, 7, 1, 1, 6, 4, 2, 5, 0, 6 }, 
				{ 7, 9, 6, 5, 3, 4, 6, 7, 7, 4, 1, 7, 7, 9, 6, 5, 3, 4, 6, 9, 7, 4, 1, 7, 0 }  };
		return 0;
	}

}
